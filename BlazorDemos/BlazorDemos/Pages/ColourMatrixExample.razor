@page "/colourMatrix"
@using VectSharp;
@using VectSharp.SVG;
@using VectSharp.Filters;
@using VectSharp.Raster.ImageSharp;

<style>
	table {
		table-layout: fixed;
	}

	td {
		width: 500px;
		padding: 10px;
	}
</style>

<div style="width: 100vw; height: 100vh; position: relative;">
	<div style="width: calc(100% - 500px); height: 100%; position: absolute; top: 0; left: 0; text-align: center">
		<img src="@imgSource" style="max-width: 100%; max-height: 100%; margin-top: 50vh; transform: translate(0, -50%)" />
	</div>

	<div style="width: 500px; height: 100vh; position: absolute; top: 0; right: 0;">
		<MatRadioGroup @bind-Value="@matrixInd" TValue="int">
		<table style="margin-top: 50vh; transform: translate(0, -50%)">
			<tr>
				<td style="width: 500px; text-align: center; padding-top: 0">
					<div style="display: inline-block; position: relative">
						<span class="mdc-floating-label mdc-floating-label--float-above" style="margin-left:0.5em; margin-top: 2em; color: rgba(0, 0, 0, 0.6)">Colour matrix</span><br />
							<MatRadioButton Value="0" TValue="int">Identity</MatRadioButton>
							<MatRadioButton Value="1" TValue="int">Greyscale</MatRadioButton>
							<MatRadioButton Value="2" TValue="int">Pastel</MatRadioButton>
					</div>
				</td>
			</tr>
			<tr>
				<td style="width: 500px; text-align: center; padding-top: 0">
							<MatRadioButton Value="3" TValue="int">Inversion</MatRadioButton>
							<MatRadioButton Value="4" TValue="int">Alpha inversion</MatRadioButton>
							<MatRadioButton Value="5" TValue="int">Inverted alpha shift</MatRadioButton>
				</td>
			</tr>
			<tr>
				<td style="width: 500px; text-align: center; padding-top: 0">
							<MatRadioButton Value="6" TValue="int">To colour (green)</MatRadioButton>
							<MatRadioButton Value="7" TValue="int">Luminance to colour (green)</MatRadioButton>
							<MatRadioButton Value="8" TValue="int">Luminance to alpha</MatRadioButton>
				</td>
			</tr>
		</table>
		</MatRadioGroup>
	</div>
</div>

@code {
	private int _matrixInd = 2;
	private int matrixInd
	{
		get
		{
			return _matrixInd;
		}

		set
		{
			_matrixInd = value;
			Render();
		}
	}

	private string imgSource = "";

	protected override Task OnInitializedAsync()
	{
		Render();
		return Task.CompletedTask;
	}

	public void Render()
	{
		Page page = new Page(178, 92);
		Graphics graphics = page.Graphics;

		Page subject = Parser.FromStream(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("BlazorDemos.SurgeonFish.svg"));

		Graphics filterSubject = subject.Graphics;

		ColourMatrix matrix = ColourMatrix.Identity;

		switch (matrixInd)
		{
			case 0:
				matrix = ColourMatrix.Identity;
				break;
			case 1:
				matrix = ColourMatrix.GreyScale;
				break;
			case 2:
				matrix = ColourMatrix.Pastel;
				break;
			case 3:
				matrix = ColourMatrix.Inversion;
				break;
			case 4:
				matrix = ColourMatrix.AlphaInversion;
				break;
			case 5:
				matrix = ColourMatrix.InvertedAlphaShift;
				break;
			case 6:
				matrix = ColourMatrix.ToColour(Colours.Green);
				break;
			case 7:
				matrix = ColourMatrix.LuminanceToColour(Colours.Green);
				break;
			case 8:
				matrix = ColourMatrix.LuminanceToAlpha();
				break;
		}

		IFilter filter = new ColourMatrixFilter(matrix);

		// Draw the filterSubject on the graphics, using the filter.
		graphics.DrawGraphics(10, 10, filterSubject, filter);

		using (MemoryStream ms = new MemoryStream())
		{
			page.SaveAsSVG(ms, filterOption: new SVGContextInterpreter.FilterOption(SVGContextInterpreter.FilterOption.FilterOperations.RasteriseIfNecessary, 2, true));

			ms.Seek(0, SeekOrigin.Begin);

			using (StreamReader sr = new StreamReader(ms))
			{
				this.imgSource = "data:image/svg+xml;base64," + Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(sr.ReadToEnd()));
			}
		}
	}
}
