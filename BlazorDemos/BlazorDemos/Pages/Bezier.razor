@page "/bezier"
@using VectSharp;
@using VectSharp.SVG;

<style>
	table {
		table-layout: fixed;
	}

	td {
		width: 200px;
		padding: 10px;
	}
</style>

<div style="width: 100vw; height: 100vh; position: relative;">
	<div style="width: calc(100% - 400px); height: 100%; position: absolute; top: 0; left: 0; text-align: center">
		<img src="@imgSource" style="max-width: 100%; max-height: 100%; margin-top: 50vh; transform: translate(0, -50%)" />
	</div>

	<div style="width: 400px; height: 100vh; position: absolute; top: 0; right: 0;">
		<table style="margin-top: 50vh; transform: translate(0, -50%)">
			<tr>
				<td>
					<MatNumericUpDownField Label="P0.X"
										   @bind-Value=@p0X
										   Step="1">
					</MatNumericUpDownField>
				</td>
				<td>
					<MatNumericUpDownField Label="P0.Y"
										   @bind-Value=@p0Y
										   Step="1">
					</MatNumericUpDownField>
				</td>
			</tr>
			<tr>
				<td>
					<MatNumericUpDownField Label="P1.X"
										   @bind-Value=@p1X
										   Step="1">
					</MatNumericUpDownField>
				</td>
				<td>
					<MatNumericUpDownField Label="P1.Y"
										   @bind-Value=@p1Y
										   Step="1">
					</MatNumericUpDownField>
				</td>
			</tr>
			<tr>
				<td>
					<MatNumericUpDownField Label="P2.X"
										   @bind-Value=@p2X
										   Step="1">
					</MatNumericUpDownField>
				</td>
				<td>
					<MatNumericUpDownField Label="P2.Y"
										   @bind-Value=@p2Y
										   Step="1">
					</MatNumericUpDownField>
				</td>
			</tr>
			<tr>
				<td>
					<MatNumericUpDownField Label="P3.X"
										   @bind-Value=@p3X
										   Step="1">
					</MatNumericUpDownField>
				</td>
				<td>
					<MatNumericUpDownField Label="P3.Y"
										   @bind-Value=@p3Y
										   Step="1">
					</MatNumericUpDownField>
				</td>
			</tr>

		</table>
	</div>
</div>

@code {
	private double _p0X = 20;
	private double p0X
	{
		get
		{
			return _p0X;
		}

		set
		{
			_p0X = value;
			Render();
		}
	}

	private double _p0Y = 30;
	private double p0Y
	{
		get
		{
			return _p0Y;
		}

		set
		{
			_p0Y = value;
			Render();
		}
	}

	private double _p1X = 50;
	private double p1X
	{
		get
		{
			return _p1X;
		}

		set
		{
			_p1X = value;
			Render();
		}
	}

	private double _p1Y = 20;
	private double p1Y
	{
		get
		{
			return _p1Y;
		}

		set
		{
			_p1Y = value;
			Render();
		}
	}

	private double _p2X = 80;
	private double p2X
	{
		get
		{
			return _p2X;
		}

		set
		{
			_p2X = value;
			Render();
		}
	}

	private double _p2Y = 40;
	private double p2Y
	{
		get
		{
			return _p2Y;
		}

		set
		{
			_p2Y = value;
			Render();
		}
	}

	private double _p3X = 80;
	private double p3X
	{
		get
		{
			return _p3X;
		}

		set
		{
			_p3X = value;
			Render();
		}
	}

	private double _p3Y = 70;
	private double p3Y
	{
		get
		{
			return _p3Y;
		}

		set
		{
			_p3Y = value;
			Render();
		}
	}

	private string imgSource = "";

	protected override Task OnInitializedAsync()
	{
		Render();
		return Task.CompletedTask;
	}

	public void Render()
	{
		Page page = new Page(100, 100);
		Graphics graphics = page.Graphics;

		IEnumerable<FormattedText> p0 = FormattedText.Format("P<sub>0</sub>", FontFamily.StandardFontFamilies.Helvetica, 10);
		Font.DetailedFontMetrics metrics0 = p0.Measure();

		IEnumerable<FormattedText> p1 = FormattedText.Format("P<sub>1</sub>", FontFamily.StandardFontFamilies.Helvetica, 10);
		Font.DetailedFontMetrics metrics1 = p1.Measure();

		IEnumerable<FormattedText> p2 = FormattedText.Format("P<sub>2</sub>", FontFamily.StandardFontFamilies.Helvetica, 10);
		Font.DetailedFontMetrics metrics2 = p2.Measure();

		IEnumerable<FormattedText> p3 = FormattedText.Format("P<sub>3</sub>", FontFamily.StandardFontFamilies.Helvetica, 10);
		Font.DetailedFontMetrics metrics3 = p3.Measure();

		Point direction0 = new Point(p1X - p0X, p1Y - p0Y);
		double modulus = direction0.Modulus();
		direction0 = new Point(direction0.X / modulus, direction0.Y / modulus);

		double centerP0X = p0X - direction0.X * 10;
		double centerP0Y = p0Y - direction0.Y * 10;

		Point direction1_2 = new Point(p2X - p1X, p2Y - p1Y);
		Point direction1_0 = new Point(p0X - p1X, p0Y - p1Y);
		modulus = direction1_2.Modulus();
		direction1_2 = new Point(direction1_2.X / modulus, direction1_2.Y / modulus);
		modulus = direction1_0.Modulus();
		direction1_0 = new Point(direction1_0.X / modulus, direction1_0.Y / modulus);
		Point direction1 = new Point(direction1_2.X + direction1_0.X, direction1_2.Y + direction1_0.Y);
		modulus = direction1.Modulus();
		direction1 = new Point(direction1.X / modulus, direction1.Y / modulus);

		double centerP1X = p1X - direction1.X * 10;
		double centerP1Y = p1Y - direction1.Y * 10;

		Point direction2_3 = new Point(p3X - p2X, p3Y - p2Y);
		Point direction2_1 = new Point(p1X - p2X, p1Y - p2Y);
		modulus = direction2_3.Modulus();
		direction2_3 = new Point(direction2_3.X / modulus, direction2_3.Y / modulus);
		modulus = direction2_1.Modulus();
		direction2_1 = new Point(direction2_1.X / modulus, direction2_1.Y / modulus);
		Point direction2 = new Point(direction2_3.X + direction2_1.X, direction2_3.Y + direction2_1.Y);
		modulus = direction2.Modulus();
		direction2 = new Point(direction2.X / modulus, direction2.Y / modulus);

		double centerP2X = p2X - direction2.X * 10;
		double centerP2Y = p2Y - direction2.Y * 10;

		Point direction3 = new Point(p2X - p3X, p2Y - p3Y);
		modulus = direction3.Modulus();
		direction3 = new Point(direction3.X / modulus, direction3.Y / modulus);

		double centerP3X = p3X - direction3.X * 10;
		double centerP3Y = p3Y - direction3.Y * 10;


		graphics.StrokePath(new GraphicsPath().MoveTo(p0X, p0Y).LineTo(p1X, p1Y).LineTo(p2X, p2Y).LineTo(p3X, p3Y), Colour.FromRgb(180, 180, 180), 1, lineDash: new LineDash(5, 5, 0));
		graphics.FillPath(new GraphicsPath().Arc(p1X, p1Y, 2, 0, 2 * Math.PI), Colour.FromRgb(180, 180, 180));
		graphics.FillPath(new GraphicsPath().Arc(p2X, p2Y, 2, 0, 2 * Math.PI), Colour.FromRgb(180, 180, 180));

		graphics.FillText(centerP0X - metrics0.Width * 0.5, centerP0Y, p0, Colours.Black, TextBaselines.Middle);
		graphics.FillText(centerP1X - metrics1.Width * 0.5, centerP1Y, p1, Colours.Black, TextBaselines.Middle);
		graphics.FillText(centerP2X - metrics2.Width * 0.5, centerP2Y, p2, Colours.Black, TextBaselines.Middle);
		graphics.FillText(centerP3X - metrics3.Width * 0.5, centerP3Y, p3, Colours.Black, TextBaselines.Middle);

		graphics.FillPath(new GraphicsPath().MoveTo(p0X, p0Y).CubicBezierTo(p1X, p1Y, p2X, p2Y, p3X, p3Y), Colours.Green);
		graphics.StrokePath(new GraphicsPath().MoveTo(p0X, p0Y).CubicBezierTo(p1X, p1Y, p2X, p2Y, p3X, p3Y), Colours.Black, 2);

		using (MemoryStream ms = new MemoryStream())
		{
			page.SaveAsSVG(ms);
			ms.Seek(0, SeekOrigin.Begin);

			using (StreamReader sr = new StreamReader(ms))
			{
				this.imgSource = "data:image/svg+xml;base64," + Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(sr.ReadToEnd()));
			}
		}
	}
}
